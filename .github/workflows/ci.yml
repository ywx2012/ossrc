name: CI

on:
  push:
  pull_request:
    types:
    - opened
    - reopened
    - synchronize
    - edited

jobs:
  run:
    strategy:
      matrix:
        runner:
        - kvmtool
        - qemu
        distro:
        - {}
        - name: ubuntu

    runs-on: 'ubuntu-latest'
    container:
      image: ${{ matrix.distro.container || matrix.distro.name }}
      options: --device=/dev/kvm
    steps:

    - name: Checkout
      uses: actions/checkout@v4

    # https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-hosted-runners/
    - name: Enable KVM group perms
      if: ${{ !(matrix.distro.name) }}
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Install packages
      run: |
        case "${{ matrix.distro.name }}" in
        "") SUDO=sudo ;;
         *) SUDO=""
        esac

        ${SUDO} apt-get update
        ${SUDO} apt-get -y --no-install-recommends install xvfb imagemagick

        ${SUDO} apt-get -y --no-install-recommends install make gcc libc6-dev

        case "${{ matrix.runner }}" in
        "kvmtool")
          ${SUDO} apt-get -y --no-install-recommends install git
          ${SUDO} apt-get -y --no-install-recommends install libsdl1.2-compat-dev
          git clone git://git.kernel.org/pub/scm/linux/kernel/git/will/kvmtool.git ~/kvmtool
          cd ~/kvmtool
          make
        ;;
        "qemu")
          ${SUDO} apt-get -y --no-install-recommends install qemu-system-x86
        ;;
        esac

    - name: Build
      run: make

    - name: Run and take screenshot (kvmtool)
      if: ${{ matrix.runner == 'kvmtool' }}
      run: |
        Xvfb :0 -screen 0 640x480x24 &
        export DISPLAY=:0
        sleep 5
        make run &
        sleep 10
        import -window root png:- | convert - -fill white +opaque black /tmp/screenshot.png
        base64 /tmp/screenshot.png

    - name: Run and take screenshot (qemu)
      if: ${{ matrix.runner == 'qemu' }}
      shell: bash
      run: |
        Xvfb :0 -screen 0 640x480x24 &
        export DISPLAY=:0
        sleep 5
        qemu-system-x86_64 -net none -boot reboot-timeout=0 -action reboot=shutdown -qmp tcp:127.0.0.1:4444,server=on,wait=off -kernel kernel.bin &
        sleep 30
        exec 3<>/dev/tcp/127.0.0.1/4444
        echo '{ "execute": "qmp_capabilities", "arguments": { } }' >&3
        echo '{ "execute": "screendump", "arguments": { "filename": "/tmp/screenshot.ppm" } }' >&3
        sleep 2
        echo '{ "execute": "quit" }' >&3
        cat <&3 || echo 'QEMU QUIT'
        convert /tmp/screenshot.ppm -fill white +opaque black /tmp/screenshot.png
        base64 /tmp/screenshot.png

    - name: Make binary reference image
      run: |
        convert screenshot.png -fill white +opaque black /tmp/binary.png
        base64 /tmp/binary.png

    - name: Compare screenshot
      shell: bash
      run: diff <(convert /tmp/binary.png mono:-) <(convert /tmp/screenshot.png mono:-)
